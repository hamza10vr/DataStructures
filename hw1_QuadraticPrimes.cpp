/*
*     *** Quadratic Primes ***
	  ***  Hamza Tanveer ****
	  ***   HW 1 ***

 */




#include <iostream>

void printQuadratic1();			// prints 40 prime numbers generated by formula n^2 + n + 41
void printQuadratic2();			// prints 80 prime numbers generated by formula n^2 -79 * n +1601
bool isPrime(int n);			//takes in an integer and return whether the given number is prime or not
void outputABn();				/*  n ^ 2 + a x n + b, output values of a, band how many consecutive values of
								                          n (count the starting zero!) can be generated */

int main ()
{

	std::cout << "\n*** Printing 40 primes generated by formula n^2 + n +41 ***\n\n";
	printQuadratic1();

	std::cout << "\n*** Printing 80 primes generated by formula n^2 - 79n + 1601 ***\n\n";
	printQuadratic2();
	int n;
	do {

		std::cout << "\nEnter a number to check whether it's prime or not: ";
		std::cin >> n;


		
		if (isPrime(n) == 0)
		{
				std::cout << n << " is not prime number !!!!!!!!!!!!!! \n\n";
		}
		else
		{
			std::cout << n << " is a prime number \n\n";
		}
		std::cout << "\n *** To exit Prime Number Checker, input the number ZERO ' 0 ' ****\n**********************************\n";
	} while (n > 0);


	std::cout << "\nOutputting the values of a,b, and how many consecutive calues of n can be generated" << std::endl;
	outputABn();


}






void printQuadratic1()
{
	for (int i = 0; i < 40; ++i)
		std::cout << i + 1 << ". Prime number is = " << (i * i) + i + 41 << std::endl;

}

void printQuadratic2()
{
	for (int i = 0; i < 80; ++i)
		std::cout << i + 1 << ". Prime number is = " << (i * i) - (79 * i) + (1601) << std::endl;
}

bool isPrime(int n)					//takes in an integer and return whether the given number is prime or not						
{
	if (n <= 1)						// discarded if integer is <= 1
	{
		return false;
	}
	for (int i = 2; i <= (n/2) ; i++)	//iterates from 2 to the mid-way point of the given integer and checks for remainder
	{

		if (n % i == 0)					// if remainder == 0 , not prime number
		{

			return false;
		}
	}
	return true;					// if reamainder doesn't equal zero, it's a prime number
}


// n ^ 2 + a x n + b, output values of a, band how many consecutive values of
// n (count the starting zero!) can be generated 

void outputABn()
{
	int count_a = 0, count_b = 0, count_n = 0;

	for (int a = -999; a <= 999; a++)
	{
		for (int b = -1000; b <= 1000; b++)
		{
			int n = 0;
			while (isPrime((n * n) + (a * n) + b))	// Calculated the number and checks if it's prime
			{
				n++;								// if prime then increases the count of n
		
			}
			if (n > count_n)
			{
				// stores the a,b, n values before the loop ends
				count_a = a;
				count_b = b;
				count_n = n;
			}
		}
	}

	std::cout << "a: " << count_a << std::endl;
	std::cout << "b: " << count_b << std::endl;
	std::cout << "Consecutive values of n: " << count_n << std::endl;
	std::cout << "a x b : " << count_a *count_b << std::endl;

}
