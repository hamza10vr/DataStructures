/*
*     *** Quadratic Primes ***
	  ***  Hamza Tanveer ****
	  ***   HW 2 ***

 */




#include <iostream>

void printQuadratic1();			// prints 40 prime numbers generated by formula n^2 + n + 41
void printQuadratic2();			// prints 80 prime numbers generated by formula n^2 -79 * n +1601
bool isPrime(int n);			//takes in an integer and return whether the given number is prime or not
void outputABn();				/* n ^ 2 + a x n + b, output values of a, band how many consecutive values of
								                          n (count the starting zero!) can be generated */

int main ()
{

	std::cout << "\n*** Printing 40 primes generated by formula n^2 + n +41 ***\n\n";
	printQuadratic1();

	std::cout << "\n*** Printing 80 primes generated by formula n^2 - 79n + 1601 ***\n\n";
	printQuadratic2();
	
	bool prime1 = isPrime(2);

	std::cout << prime1 << std::endl;

	bool prime2 = isPrime(4);
	std::cout << prime2 << std::endl;

	bool prime3 = isPrime(17);
	std::cout << prime3 << std::endl;
	
	bool prime4 = isPrime(21);
	std::cout << prime4 << std::endl;

	isPrime(23);


}

void printQuadratic1()
{
	for (int i = 0; i < 40; ++i)
		std::cout << i + 1 << ". Prime number is = " << (i * i) + i + 41 << std::endl;

}

void printQuadratic2()
{
	for (int i = 0; i < 80; ++i)
		std::cout << i + 1 << ". Prime number is = " << (i * i) - (79 * i) + (1601) << std::endl;
}

bool isPrime(int n)					//takes in an integer and return whether the given number is prime or not						
{
	if (n <= 1)						// discarded if integer is <= 1
	{
		return false;
	}
	for (int i = 2; i <= (n/2) ; i++)	//iterates from 2 to the mid-way point of the given integer and checks for remainder
	{

		if (n % i == 0)					// if remainder == 0 , not prime number
		{

			return false;
		}
	}
	return true;					// if reamainder doesn't equal zero, it's a prime number
}

void outputABn()
{
	int vala = 0, valb = 0, valn = 0;

	for (int a = -999; a <= 999; a++)
	{
		for (int b = -1000; b <= 1000; b++)
		{
			int n = 0;
			while (isPrime((pow(n, 2) + (a * n) + b)))
			{
				n++;
			}
			if (n > valn)
			{
				vala = a;
				valb = b;
				valn = n;
			}
		}
	}

	std::cout << "Value of a: " << vala << std::endl;
	std::cout << "Value of b: " << valb << std::endl;
	std::cout << "Consecutive values of n: " << valn << std::endl;
}
